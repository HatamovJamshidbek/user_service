// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: user_profile.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserProfilServerClient is the client API for UserProfilServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserProfilServerClient interface {
	CreateUserProfiles(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Void, error)
	UpdateUserProfiles(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Void, error)
	DeleteUserProfiles(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Void, error)
	GetByUserID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*GetIDUserRespons, error)
	GetAllUser(ctx context.Context, in *UserFilter, opts ...grpc.CallOption) (*FilterUser, error)
}

type userProfilServerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserProfilServerClient(cc grpc.ClientConnInterface) UserProfilServerClient {
	return &userProfilServerClient{cc}
}

func (c *userProfilServerClient) CreateUserProfiles(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/protos.UserProfilServer/CreateUserProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfilServerClient) UpdateUserProfiles(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/protos.UserProfilServer/UpdateUserProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfilServerClient) DeleteUserProfiles(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/protos.UserProfilServer/DeleteUserProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfilServerClient) GetByUserID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*GetIDUserRespons, error) {
	out := new(GetIDUserRespons)
	err := c.cc.Invoke(ctx, "/protos.UserProfilServer/GetByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfilServerClient) GetAllUser(ctx context.Context, in *UserFilter, opts ...grpc.CallOption) (*FilterUser, error) {
	out := new(FilterUser)
	err := c.cc.Invoke(ctx, "/protos.UserProfilServer/GetAllUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserProfilServerServer is the server API for UserProfilServer service.
// All implementations must embed UnimplementedUserProfilServerServer
// for forward compatibility
type UserProfilServerServer interface {
	CreateUserProfiles(context.Context, *UserRequest) (*Void, error)
	UpdateUserProfiles(context.Context, *UserRequest) (*Void, error)
	DeleteUserProfiles(context.Context, *UserID) (*Void, error)
	GetByUserID(context.Context, *UserID) (*GetIDUserRespons, error)
	GetAllUser(context.Context, *UserFilter) (*FilterUser, error)
	mustEmbedUnimplementedUserProfilServerServer()
}

// UnimplementedUserProfilServerServer must be embedded to have forward compatible implementations.
type UnimplementedUserProfilServerServer struct {
}

func (UnimplementedUserProfilServerServer) CreateUserProfiles(context.Context, *UserRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserProfiles not implemented")
}
func (UnimplementedUserProfilServerServer) UpdateUserProfiles(context.Context, *UserRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfiles not implemented")
}
func (UnimplementedUserProfilServerServer) DeleteUserProfiles(context.Context, *UserID) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserProfiles not implemented")
}
func (UnimplementedUserProfilServerServer) GetByUserID(context.Context, *UserID) (*GetIDUserRespons, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUserID not implemented")
}
func (UnimplementedUserProfilServerServer) GetAllUser(context.Context, *UserFilter) (*FilterUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUser not implemented")
}
func (UnimplementedUserProfilServerServer) mustEmbedUnimplementedUserProfilServerServer() {}

// UnsafeUserProfilServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserProfilServerServer will
// result in compilation errors.
type UnsafeUserProfilServerServer interface {
	mustEmbedUnimplementedUserProfilServerServer()
}

func RegisterUserProfilServerServer(s grpc.ServiceRegistrar, srv UserProfilServerServer) {
	s.RegisterService(&UserProfilServer_ServiceDesc, srv)
}

func _UserProfilServer_CreateUserProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfilServerServer).CreateUserProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserProfilServer/CreateUserProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfilServerServer).CreateUserProfiles(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfilServer_UpdateUserProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfilServerServer).UpdateUserProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserProfilServer/UpdateUserProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfilServerServer).UpdateUserProfiles(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfilServer_DeleteUserProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfilServerServer).DeleteUserProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserProfilServer/DeleteUserProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfilServerServer).DeleteUserProfiles(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfilServer_GetByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfilServerServer).GetByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserProfilServer/GetByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfilServerServer).GetByUserID(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfilServer_GetAllUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfilServerServer).GetAllUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserProfilServer/GetAllUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfilServerServer).GetAllUser(ctx, req.(*UserFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// UserProfilServer_ServiceDesc is the grpc.ServiceDesc for UserProfilServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserProfilServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.UserProfilServer",
	HandlerType: (*UserProfilServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserProfiles",
			Handler:    _UserProfilServer_CreateUserProfiles_Handler,
		},
		{
			MethodName: "UpdateUserProfiles",
			Handler:    _UserProfilServer_UpdateUserProfiles_Handler,
		},
		{
			MethodName: "DeleteUserProfiles",
			Handler:    _UserProfilServer_DeleteUserProfiles_Handler,
		},
		{
			MethodName: "GetByUserID",
			Handler:    _UserProfilServer_GetByUserID_Handler,
		},
		{
			MethodName: "GetAllUser",
			Handler:    _UserProfilServer_GetAllUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_profile.proto",
}
