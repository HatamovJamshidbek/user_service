// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: composition.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompositionServiceClient is the client API for CompositionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompositionServiceClient interface {
	CreateComposition(ctx context.Context, in *CreateCompositionRequest, opts ...grpc.CallOption) (*Void, error)
	UpdateComposition(ctx context.Context, in *UpdateCompositionRequest, opts ...grpc.CallOption) (*Void, error)
	DeleteComposition(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Void, error)
	GetCompositionByUserid(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*CompositionsResponse, error)
	GetCompositionById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*CompositionResponse, error)
	CreateTrack(ctx context.Context, in *CreateTrackRequest, opts ...grpc.CallOption) (*Void, error)
	GetTrack(ctx context.Context, in *GetTrackRequest, opts ...grpc.CallOption) (*TracksResponse, error)
	UpdateTrack(ctx context.Context, in *UpdateTrackRequest, opts ...grpc.CallOption) (*Void, error)
	DeleteTrack(ctx context.Context, in *DeleteTrackRequest, opts ...grpc.CallOption) (*Void, error)
}

type compositionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompositionServiceClient(cc grpc.ClientConnInterface) CompositionServiceClient {
	return &compositionServiceClient{cc}
}

func (c *compositionServiceClient) CreateComposition(ctx context.Context, in *CreateCompositionRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/protos.CompositionService/CreateComposition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionServiceClient) UpdateComposition(ctx context.Context, in *UpdateCompositionRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/protos.CompositionService/UpdateComposition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionServiceClient) DeleteComposition(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/protos.CompositionService/DeleteComposition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionServiceClient) GetCompositionByUserid(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*CompositionsResponse, error) {
	out := new(CompositionsResponse)
	err := c.cc.Invoke(ctx, "/protos.CompositionService/GetCompositionByUserid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionServiceClient) GetCompositionById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*CompositionResponse, error) {
	out := new(CompositionResponse)
	err := c.cc.Invoke(ctx, "/protos.CompositionService/GetCompositionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionServiceClient) CreateTrack(ctx context.Context, in *CreateTrackRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/protos.CompositionService/CreateTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionServiceClient) GetTrack(ctx context.Context, in *GetTrackRequest, opts ...grpc.CallOption) (*TracksResponse, error) {
	out := new(TracksResponse)
	err := c.cc.Invoke(ctx, "/protos.CompositionService/GetTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionServiceClient) UpdateTrack(ctx context.Context, in *UpdateTrackRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/protos.CompositionService/UpdateTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionServiceClient) DeleteTrack(ctx context.Context, in *DeleteTrackRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/protos.CompositionService/DeleteTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompositionServiceServer is the server API for CompositionService service.
// All implementations must embed UnimplementedCompositionServiceServer
// for forward compatibility
type CompositionServiceServer interface {
	CreateComposition(context.Context, *CreateCompositionRequest) (*Void, error)
	UpdateComposition(context.Context, *UpdateCompositionRequest) (*Void, error)
	DeleteComposition(context.Context, *IdRequest) (*Void, error)
	GetCompositionByUserid(context.Context, *IdRequest) (*CompositionsResponse, error)
	GetCompositionById(context.Context, *IdRequest) (*CompositionResponse, error)
	CreateTrack(context.Context, *CreateTrackRequest) (*Void, error)
	GetTrack(context.Context, *GetTrackRequest) (*TracksResponse, error)
	UpdateTrack(context.Context, *UpdateTrackRequest) (*Void, error)
	DeleteTrack(context.Context, *DeleteTrackRequest) (*Void, error)
	mustEmbedUnimplementedCompositionServiceServer()
}

// UnimplementedCompositionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompositionServiceServer struct {
}

func (UnimplementedCompositionServiceServer) CreateComposition(context.Context, *CreateCompositionRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComposition not implemented")
}
func (UnimplementedCompositionServiceServer) UpdateComposition(context.Context, *UpdateCompositionRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComposition not implemented")
}
func (UnimplementedCompositionServiceServer) DeleteComposition(context.Context, *IdRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComposition not implemented")
}
func (UnimplementedCompositionServiceServer) GetCompositionByUserid(context.Context, *IdRequest) (*CompositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompositionByUserid not implemented")
}
func (UnimplementedCompositionServiceServer) GetCompositionById(context.Context, *IdRequest) (*CompositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompositionById not implemented")
}
func (UnimplementedCompositionServiceServer) CreateTrack(context.Context, *CreateTrackRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrack not implemented")
}
func (UnimplementedCompositionServiceServer) GetTrack(context.Context, *GetTrackRequest) (*TracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrack not implemented")
}
func (UnimplementedCompositionServiceServer) UpdateTrack(context.Context, *UpdateTrackRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrack not implemented")
}
func (UnimplementedCompositionServiceServer) DeleteTrack(context.Context, *DeleteTrackRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrack not implemented")
}
func (UnimplementedCompositionServiceServer) mustEmbedUnimplementedCompositionServiceServer() {}

// UnsafeCompositionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompositionServiceServer will
// result in compilation errors.
type UnsafeCompositionServiceServer interface {
	mustEmbedUnimplementedCompositionServiceServer()
}

func RegisterCompositionServiceServer(s grpc.ServiceRegistrar, srv CompositionServiceServer) {
	s.RegisterService(&CompositionService_ServiceDesc, srv)
}

func _CompositionService_CreateComposition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositionServiceServer).CreateComposition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.CompositionService/CreateComposition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositionServiceServer).CreateComposition(ctx, req.(*CreateCompositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompositionService_UpdateComposition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositionServiceServer).UpdateComposition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.CompositionService/UpdateComposition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositionServiceServer).UpdateComposition(ctx, req.(*UpdateCompositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompositionService_DeleteComposition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositionServiceServer).DeleteComposition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.CompositionService/DeleteComposition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositionServiceServer).DeleteComposition(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompositionService_GetCompositionByUserid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositionServiceServer).GetCompositionByUserid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.CompositionService/GetCompositionByUserid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositionServiceServer).GetCompositionByUserid(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompositionService_GetCompositionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositionServiceServer).GetCompositionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.CompositionService/GetCompositionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositionServiceServer).GetCompositionById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompositionService_CreateTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositionServiceServer).CreateTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.CompositionService/CreateTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositionServiceServer).CreateTrack(ctx, req.(*CreateTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompositionService_GetTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositionServiceServer).GetTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.CompositionService/GetTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositionServiceServer).GetTrack(ctx, req.(*GetTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompositionService_UpdateTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositionServiceServer).UpdateTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.CompositionService/UpdateTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositionServiceServer).UpdateTrack(ctx, req.(*UpdateTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompositionService_DeleteTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositionServiceServer).DeleteTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.CompositionService/DeleteTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositionServiceServer).DeleteTrack(ctx, req.(*DeleteTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompositionService_ServiceDesc is the grpc.ServiceDesc for CompositionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompositionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.CompositionService",
	HandlerType: (*CompositionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateComposition",
			Handler:    _CompositionService_CreateComposition_Handler,
		},
		{
			MethodName: "UpdateComposition",
			Handler:    _CompositionService_UpdateComposition_Handler,
		},
		{
			MethodName: "DeleteComposition",
			Handler:    _CompositionService_DeleteComposition_Handler,
		},
		{
			MethodName: "GetCompositionByUserid",
			Handler:    _CompositionService_GetCompositionByUserid_Handler,
		},
		{
			MethodName: "GetCompositionById",
			Handler:    _CompositionService_GetCompositionById_Handler,
		},
		{
			MethodName: "CreateTrack",
			Handler:    _CompositionService_CreateTrack_Handler,
		},
		{
			MethodName: "GetTrack",
			Handler:    _CompositionService_GetTrack_Handler,
		},
		{
			MethodName: "UpdateTrack",
			Handler:    _CompositionService_UpdateTrack_Handler,
		},
		{
			MethodName: "DeleteTrack",
			Handler:    _CompositionService_DeleteTrack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "composition.proto",
}
