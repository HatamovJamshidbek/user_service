// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: discovey.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiscoveryServiceClient is the client API for DiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscoveryServiceClient interface {
	GetCompositionTrending(ctx context.Context, in *Void, opts ...grpc.CallOption) (*DiscoveriesResponse, error)
	GetCompositionRecommend(ctx context.Context, in *Void, opts ...grpc.CallOption) (*DiscoveriesResponse, error)
	GetCompositionGenre(ctx context.Context, in *GetGenre, opts ...grpc.CallOption) (*DiscoveriesResponse, error)
	GetDiscovery(ctx context.Context, in *GetDiscoveryRequest, opts ...grpc.CallOption) (*DiscoveriesResponse, error)
	CreateCompositionLike(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*Void, error)
	DeleteCompositionLike(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*Void, error)
}

type discoveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscoveryServiceClient(cc grpc.ClientConnInterface) DiscoveryServiceClient {
	return &discoveryServiceClient{cc}
}

func (c *discoveryServiceClient) GetCompositionTrending(ctx context.Context, in *Void, opts ...grpc.CallOption) (*DiscoveriesResponse, error) {
	out := new(DiscoveriesResponse)
	err := c.cc.Invoke(ctx, "/protos.DiscoveryService/GetCompositionTrending", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryServiceClient) GetCompositionRecommend(ctx context.Context, in *Void, opts ...grpc.CallOption) (*DiscoveriesResponse, error) {
	out := new(DiscoveriesResponse)
	err := c.cc.Invoke(ctx, "/protos.DiscoveryService/GetCompositionRecommend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryServiceClient) GetCompositionGenre(ctx context.Context, in *GetGenre, opts ...grpc.CallOption) (*DiscoveriesResponse, error) {
	out := new(DiscoveriesResponse)
	err := c.cc.Invoke(ctx, "/protos.DiscoveryService/GetCompositionGenre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryServiceClient) GetDiscovery(ctx context.Context, in *GetDiscoveryRequest, opts ...grpc.CallOption) (*DiscoveriesResponse, error) {
	out := new(DiscoveriesResponse)
	err := c.cc.Invoke(ctx, "/protos.DiscoveryService/GetDiscovery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryServiceClient) CreateCompositionLike(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/protos.DiscoveryService/CreateCompositionLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryServiceClient) DeleteCompositionLike(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/protos.DiscoveryService/DeleteCompositionLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscoveryServiceServer is the server API for DiscoveryService service.
// All implementations must embed UnimplementedDiscoveryServiceServer
// for forward compatibility
type DiscoveryServiceServer interface {
	GetCompositionTrending(context.Context, *Void) (*DiscoveriesResponse, error)
	GetCompositionRecommend(context.Context, *Void) (*DiscoveriesResponse, error)
	GetCompositionGenre(context.Context, *GetGenre) (*DiscoveriesResponse, error)
	GetDiscovery(context.Context, *GetDiscoveryRequest) (*DiscoveriesResponse, error)
	CreateCompositionLike(context.Context, *LikeRequest) (*Void, error)
	DeleteCompositionLike(context.Context, *LikeRequest) (*Void, error)
	mustEmbedUnimplementedDiscoveryServiceServer()
}

// UnimplementedDiscoveryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDiscoveryServiceServer struct {
}

func (UnimplementedDiscoveryServiceServer) GetCompositionTrending(context.Context, *Void) (*DiscoveriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompositionTrending not implemented")
}
func (UnimplementedDiscoveryServiceServer) GetCompositionRecommend(context.Context, *Void) (*DiscoveriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompositionRecommend not implemented")
}
func (UnimplementedDiscoveryServiceServer) GetCompositionGenre(context.Context, *GetGenre) (*DiscoveriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompositionGenre not implemented")
}
func (UnimplementedDiscoveryServiceServer) GetDiscovery(context.Context, *GetDiscoveryRequest) (*DiscoveriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscovery not implemented")
}
func (UnimplementedDiscoveryServiceServer) CreateCompositionLike(context.Context, *LikeRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompositionLike not implemented")
}
func (UnimplementedDiscoveryServiceServer) DeleteCompositionLike(context.Context, *LikeRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompositionLike not implemented")
}
func (UnimplementedDiscoveryServiceServer) mustEmbedUnimplementedDiscoveryServiceServer() {}

// UnsafeDiscoveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscoveryServiceServer will
// result in compilation errors.
type UnsafeDiscoveryServiceServer interface {
	mustEmbedUnimplementedDiscoveryServiceServer()
}

func RegisterDiscoveryServiceServer(s grpc.ServiceRegistrar, srv DiscoveryServiceServer) {
	s.RegisterService(&DiscoveryService_ServiceDesc, srv)
}

func _DiscoveryService_GetCompositionTrending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServiceServer).GetCompositionTrending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.DiscoveryService/GetCompositionTrending",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServiceServer).GetCompositionTrending(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoveryService_GetCompositionRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServiceServer).GetCompositionRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.DiscoveryService/GetCompositionRecommend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServiceServer).GetCompositionRecommend(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoveryService_GetCompositionGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGenre)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServiceServer).GetCompositionGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.DiscoveryService/GetCompositionGenre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServiceServer).GetCompositionGenre(ctx, req.(*GetGenre))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoveryService_GetDiscovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServiceServer).GetDiscovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.DiscoveryService/GetDiscovery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServiceServer).GetDiscovery(ctx, req.(*GetDiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoveryService_CreateCompositionLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServiceServer).CreateCompositionLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.DiscoveryService/CreateCompositionLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServiceServer).CreateCompositionLike(ctx, req.(*LikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoveryService_DeleteCompositionLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServiceServer).DeleteCompositionLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.DiscoveryService/DeleteCompositionLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServiceServer).DeleteCompositionLike(ctx, req.(*LikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiscoveryService_ServiceDesc is the grpc.ServiceDesc for DiscoveryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiscoveryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.DiscoveryService",
	HandlerType: (*DiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCompositionTrending",
			Handler:    _DiscoveryService_GetCompositionTrending_Handler,
		},
		{
			MethodName: "GetCompositionRecommend",
			Handler:    _DiscoveryService_GetCompositionRecommend_Handler,
		},
		{
			MethodName: "GetCompositionGenre",
			Handler:    _DiscoveryService_GetCompositionGenre_Handler,
		},
		{
			MethodName: "GetDiscovery",
			Handler:    _DiscoveryService_GetDiscovery_Handler,
		},
		{
			MethodName: "CreateCompositionLike",
			Handler:    _DiscoveryService_CreateCompositionLike_Handler,
		},
		{
			MethodName: "DeleteCompositionLike",
			Handler:    _DiscoveryService_DeleteCompositionLike_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "discovey.proto",
}
